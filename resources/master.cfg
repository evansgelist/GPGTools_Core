################################################################################
#
# GPGTools Buildbot config script.
#
# @author:  Alex
# @version: 2012-02-19
# @url:     http://build.gpgtools.org
#
################################################################################


# CONFIG #######################################################################
title="GPGTools"
url="http://www.gpgtools.org/"
bbUrl="http://build.gpgtools.org/"
httpPort="8811"
slaveName="gpgtools-slave"
slavePass="pass"
slavePort=9989
mailFrom="buildbot@hekla.scnr.ch"
mailExtra=["alex@willner.ws", "lukas@dressyvagabonds.com", "Roman.Zechmeister@aon.at", "stevebell@gulli.com"]
mailMode="failing"
mailSubject="[GPGTools] Build result"
gitBase='git://github.com/GPGTools/'
pollinterval=120
stableTimer=100
################################################################################


# PROJECT IDENTITY #############################################################
# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.
c['title'] = title
c['titleURL'] = url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.
c['buildbotURL'] = bbUrl
################################################################################


# BUILDSLAVES ##################################################################
# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave(slaveName, slavePass)]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = slavePort
################################################################################


# DB URL ########################################################################
# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"
################################################################################


# CHANGESOURCES ################################################################
# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.
from buildbot.changes.gitpoller import GitPoller
from buildbot.changes import pb
c['change_source'] = [pb.PBChangeSource()]
################################################################################


# SCHEDULERS ###################################################################
# Configure the Schedulers, which decide how to react to incoming changes.
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.changes import filter
c['schedulers'] = []
################################################################################


# STATUS TARGETS ###############################################################
# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.
from buildbot.status import html
from buildbot.status.web import authz
from buildbot.status import mail

c['status'] = []

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=httpPort, authz=authz_cfg))
c['status'].append(mail.MailNotifier(
                      fromaddr=mailFrom,
                      extraRecipients=mailExtra,
                      sendToInterestedUsers=True,
                      mode=mailMode,
                      subject=mailSubject))
################################################################################


# BUILDERS #####################################################################
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.
from buildbot.process.factory import BuildFactory
from buildbot.steps.trigger import Trigger
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand
from buildbot.steps.shell import Compile
from buildbot.config import BuilderConfig

c['builders'] = []
################################################################################


# GENERAL METHODS ##############################################################
def use_module(module):
    c['change_source'].append(GitPoller(
        module['repourl'],
        workdir=module['reponame'], branch=module['branch'],
        pollinterval=pollinterval, project=module['reponame']))

    c['schedulers'].append(SingleBranchScheduler(
                            name=module['reponame'],
                            change_filter=filter.ChangeFilter(project=module['reponame']),
                            treeStableTimer=stableTimer,
                            builderNames=[module['reponame']]))

    c['builders'].append(
        BuilderConfig(name=module['reponame'],
          slavenames=[slaveName],
          factory=module['factory']))

def init_module(repository, branch):
    module = {}
    module['repository']=repository
    module['branch']=branch
    module['repourl']=gitBase+repository+'.git'
    module['reponame']=repository+"_"+branch
    module['factory'] = BuildFactory()
    module['factory'].addStep(ShellCommand(command="test -d \"./build-env\" && hdiutil detach -force \"./build-env\"; echo;",
        description=["cleaning up"],
        descriptionDone=["cleaned up"]))
    module['factory'].addStep(Git(repourl=module['repourl'], mode='clobber', branch=module['branch'], submodules=True, shallow=True))
    #Workaround since buildbot does not recursively checkout projects
    module['factory'].addStep(Compile(command=["git", "submodule", "foreach", "git", "submodule", "update", "--init"],
        description=["workaround for buildbot"],
        descriptionDone=["workaround for buildbot"]))

    return module
################################################################################


# GPGTOOLS RELATED METHODS #####################################################
def add_check(module):
    module['factory'].addStep(Compile(command=["make", "check"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["validating"],
        descriptionDone=["validated"]))
    return module

def add_test(module):
    module['factory'].addStep(Compile(command=["make", "test"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["testing"],
        descriptionDone=["tested"]))
    return module

def add_update(module):
    module['factory'].addStep(Compile(command=["make", "update"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["updating deps"],
        descriptionDone=["updated deps"]))
    return module

def add_compile(module):
    module['factory'].addStep(Compile(command=["make", "compile"],
        warningPattern="^.* warning:",
        suppressionFile="Dependencies/GPGTools_Core/resources/compiler_warnings.supp",
        description=["compiling"],
        descriptionDone=["compiled"]))
    return module

def add_htmltest(module):
    module['factory'].addStep(Compile(command=["make", "compile"],
        warningPattern="^.*Line ",
        description=["validating"],
        descriptionDone=["validated"]))
    return module

def add_check_git(module):
    module['factory'].addStep(Compile(command=["cat", ".git/config"],
        warningPattern="^.*git@github",
        description=["checking git config"],
        descriptionDone=["git config checked"]))
    return module

def add_deploy(module):
    module['factory'].addStep(ShellCommand(command=["make", "deploy"],
        description=["deploying"],
        descriptionDone=["deployed"]))
    return module

def add_publish(module):
    module['factory'].addStep(ShellCommand(command=["./Dependencies/GPGTools_Core/scripts/create_dmg.sh", "auto", "buildbot"],
        description=["creating installer"],
        descriptionDone=["installer available"]))
    module['factory'].addStep(ShellCommand(command=["./Dependencies/GPGTools_Core/scripts/bb_deploy_dmg.sh", "/GPGTools/buildbot/gpgtools-master/public_html/download"],
        description=["preparing download"],
        descriptionDone=["download available"]))
    return module

def add_nightly(module):
    module['factory'].addStep(ShellCommand(command=["make", "nightly"],
        description=["switching to 'nightly' mode"],
        descriptionDone=["switched to 'nightly' mode"]))
    return module

def add_showunmerged(module):
    module['factory'].addStep(Compile(command=["make", "show-missing-deps"],
        warningPattern="^missing: ",
        description=["looking for unmerged dependency commits"],
        descriptionDone=["looked for unmerged dependency commits"]))
    return module

def trig_inst(module):
    module['factory'].addStep(Trigger(schedulerNames=["InstallerTrigger"],
                                      waitForFinish=False,
                                      alwaysUseLatest=True))
    return module
################################################################################


# GPGTOOLS #####################################################################
installer = init_module("GPGTools_Installer", "master")
use_module(add_publish(add_showunmerged(add_compile(add_nightly(installer)))))

c['schedulers'].append(Triggerable(name="InstallerTrigger", builderNames=[installer["reponame"]]))

use_module(add_check(trig_inst(add_publish(add_compile(add_showunmerged(init_module("GPGKeychainAccess", "master")))))))
use_module(add_check(trig_inst(add_publish(add_compile(add_showunmerged(init_module("GPGMail", "master")))))))
use_module(add_check(add_publish(add_compile(add_showunmerged(init_module("GPGMail", "experimental"))))))
use_module(add_check(add_publish(add_compile(add_showunmerged(init_module("GPGMail", "mountain-lion"))))))
use_module(add_check(add_publish(add_compile(add_showunmerged(init_module("GPGMail", "snow_leopard"))))))
use_module(add_check(trig_inst(add_publish(add_compile(add_showunmerged(init_module("GPGServices", "master")))))))
use_module(add_check(trig_inst(add_publish(add_compile(add_showunmerged(init_module("GPGPreferences", "master")))))))
use_module(trig_inst(add_publish(add_compile(add_showunmerged(init_module("MacGPG2", "homebrew"))))))
use_module(add_publish(add_compile(add_showunmerged(init_module("MacGPG1", "master")))))
use_module(init_module("GPGTools_Core", "master"))
use_module(add_check(add_test(add_compile(add_showunmerged(init_module("Libmacgpg", "master"))))))
use_module(add_check(add_compile(add_showunmerged(init_module("pinentry-mac", "master")))))
use_module(add_htmltest(init_module("GPGTools_Homepage", "gh-pages")))
################################################################################
